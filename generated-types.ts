/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/ideas": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ideas.id"];
          title?: parameters["rowFilter.ideas.title"];
          description?: parameters["rowFilter.ideas.description"];
          problem?: parameters["rowFilter.ideas.problem"];
          solution?: parameters["rowFilter.ideas.solution"];
          updated_at?: parameters["rowFilter.ideas.updated_at"];
          created_at?: parameters["rowFilter.ideas.created_at"];
          user_id?: parameters["rowFilter.ideas.user_id"];
          whatsapp?: parameters["rowFilter.ideas.whatsapp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ideas"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ideas */
          ideas?: definitions["ideas"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ideas.id"];
          title?: parameters["rowFilter.ideas.title"];
          description?: parameters["rowFilter.ideas.description"];
          problem?: parameters["rowFilter.ideas.problem"];
          solution?: parameters["rowFilter.ideas.solution"];
          updated_at?: parameters["rowFilter.ideas.updated_at"];
          created_at?: parameters["rowFilter.ideas.created_at"];
          user_id?: parameters["rowFilter.ideas.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ideas.id"];
          title?: parameters["rowFilter.ideas.title"];
          description?: parameters["rowFilter.ideas.description"];
          problem?: parameters["rowFilter.ideas.problem"];
          solution?: parameters["rowFilter.ideas.solution"];
          updated_at?: parameters["rowFilter.ideas.updated_at"];
          created_at?: parameters["rowFilter.ideas.created_at"];
          user_id?: parameters["rowFilter.ideas.user_id"];
        };
        body: {
          /** ideas */
          ideas?: definitions["ideas"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          username?: parameters["rowFilter.profiles.username"];
          bio?: parameters["rowFilter.profiles.bio"];
          profile_image?: parameters["rowFilter.profiles.profile_image"];
          id?: parameters["rowFilter.profiles.id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          username?: parameters["rowFilter.profiles.username"];
          bio?: parameters["rowFilter.profiles.bio"];
          profile_image?: parameters["rowFilter.profiles.profile_image"];
          id?: parameters["rowFilter.profiles.id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          username?: parameters["rowFilter.profiles.username"];
          bio?: parameters["rowFilter.profiles.bio"];
          profile_image?: parameters["rowFilter.profiles.profile_image"];
          id?: parameters["rowFilter.profiles.id"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/competitions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.competitions.id"];
          title?: parameters["rowFilter.competitions.title"];
          poster?: parameters["rowFilter.competitions.poster"];
          description?: parameters["rowFilter.competitions.description"];
          deadline?: parameters["rowFilter.competitions.deadline"];
          link?: parameters["rowFilter.competitions.link"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["competitions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** competitions */
          competitions?: definitions["competitions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.competitions.id"];
          title?: parameters["rowFilter.competitions.title"];
          poster?: parameters["rowFilter.competitions.poster"];
          description?: parameters["rowFilter.competitions.description"];
          deadline?: parameters["rowFilter.competitions.deadline"];
          link?: parameters["rowFilter.competitions.link"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.competitions.id"];
          title?: parameters["rowFilter.competitions.title"];
          poster?: parameters["rowFilter.competitions.poster"];
          description?: parameters["rowFilter.competitions.description"];
          deadline?: parameters["rowFilter.competitions.deadline"];
          link?: parameters["rowFilter.competitions.link"];
        };
        body: {
          /** competitions */
          competitions?: definitions["competitions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          username?: parameters["rowFilter.users.username"];
          bio?: parameters["rowFilter.users.bio"];
          first_name?: parameters["rowFilter.users.first_name"];
          last_name?: parameters["rowFilter.users.last_name"];
          profile_image?: parameters["rowFilter.users.profile_image"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/tags": {
    get: {
      parameters: {
        query: {
          name?: parameters["rowFilter.tags.name"];
          colour?: parameters["rowFilter.tags.colour"];
          slug?: parameters["rowFilter.tags.slug"];
          id?: parameters["rowFilter.tags.id"];
          type?: parameters["rowFilter.tags.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          name?: parameters["rowFilter.tags.name"];
          colour?: parameters["rowFilter.tags.colour"];
          slug?: parameters["rowFilter.tags.slug"];
          id?: parameters["rowFilter.tags.id"];
          type?: parameters["rowFilter.tags.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          name?: parameters["rowFilter.tags.name"];
          colour?: parameters["rowFilter.tags.colour"];
          slug?: parameters["rowFilter.tags.slug"];
          id?: parameters["rowFilter.tags.id"];
          type?: parameters["rowFilter.tags.type"];
        };
        body: {
          /** tags */
          tags?: definitions["tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/idea_tags": {
    get: {
      parameters: {
        query: {
          idea_id?: parameters["rowFilter.idea_tags.idea_id"];
          id?: parameters["rowFilter.idea_tags.id"];
          tag_id?: parameters["rowFilter.idea_tags.tag_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["idea_tags"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** idea_tags */
          idea_tags?: definitions["idea_tags"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          idea_id?: parameters["rowFilter.idea_tags.idea_id"];
          id?: parameters["rowFilter.idea_tags.id"];
          tag_id?: parameters["rowFilter.idea_tags.tag_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          idea_id?: parameters["rowFilter.idea_tags.idea_id"];
          id?: parameters["rowFilter.idea_tags.id"];
          tag_id?: parameters["rowFilter.idea_tags.tag_id"];
        };
        body: {
          /** idea_tags */
          idea_tags?: definitions["idea_tags"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  ideas: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    whatsapp: string;
    /** Format: character varying */
    title: string;
    /** Format: text */
    description: string;
    /** Format: text */
    problem: string;
    /** Format: text */
    solution: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
  };
  profiles: {
    /** Format: text */
    first_name: string;
    /** Format: text */
    last_name: string;
    /** Format: text */
    username: string;
    /** Format: text */
    bio: string;
    /** Format: text */
    profile_image: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
  };
  competitions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    title: string;
    /** Format: text */
    poster?: string;
    /** Format: text */
    description?: string;
    /** Format: date */
    deadline?: string;
    /** Format: text */
    link?: string;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: character varying */
    email?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    bio?: string;
    /** Format: text */
    first_name?: string;
    /** Format: text */
    last_name?: string;
    /** Format: text */
    profile_image?: string;
  };
  tags: {
    /** Format: text */
    name: string;
    /** Format: text */
    colour: string;
    /** Format: text */
    slug: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    type: string;
  };
  idea_tags: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `ideas.id`.<fk table='ideas' column='id'/>
     */
    idea_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tags.id`.<fk table='tags' column='id'/>
     */
    tag_id: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description ideas */
  "body.ideas": definitions["ideas"];
  /** Format: uuid */
  "rowFilter.ideas.id": string;
  /** Format: character varying */
  "rowFilter.ideas.title": string;
  /** Format: text */
  "rowFilter.ideas.description": string;
  /** Format: text */
  "rowFilter.ideas.problem": string;
  /** Format: text */
  "rowFilter.ideas.whatsapp": string;
  /** Format: text */
  "rowFilter.ideas.solution": string;
  /** Format: timestamp without time zone */
  "rowFilter.ideas.updated_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.ideas.created_at": string;
  /** Format: uuid */
  "rowFilter.ideas.user_id": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: text */
  "rowFilter.profiles.first_name": string;
  /** Format: text */
  "rowFilter.profiles.last_name": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.bio": string;
  /** Format: text */
  "rowFilter.profiles.profile_image": string;
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** @description competitions */
  "body.competitions": definitions["competitions"];
  /** Format: uuid */
  "rowFilter.competitions.id": string;
  /** Format: character varying */
  "rowFilter.competitions.title": string;
  /** Format: text */
  "rowFilter.competitions.poster": string;
  /** Format: text */
  "rowFilter.competitions.description": string;
  /** Format: date */
  "rowFilter.competitions.deadline": string;
  /** Format: text */
  "rowFilter.competitions.link": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: character varying */
  "rowFilter.users.email": string;
  /** Format: text */
  "rowFilter.users.username": string;
  /** Format: text */
  "rowFilter.users.bio": string;
  /** Format: text */
  "rowFilter.users.first_name": string;
  /** Format: text */
  "rowFilter.users.last_name": string;
  /** Format: text */
  "rowFilter.users.profile_image": string;
  /** @description tags */
  "body.tags": definitions["tags"];
  /** Format: text */
  "rowFilter.tags.name": string;
  /** Format: text */
  "rowFilter.tags.colour": string;
  /** Format: text */
  "rowFilter.tags.slug": string;
  /** Format: uuid */
  "rowFilter.tags.id": string;
  /** Format: text */
  "rowFilter.tags.type": string;
  /** @description idea_tags */
  "body.idea_tags": definitions["idea_tags"];
  /** Format: uuid */
  "rowFilter.idea_tags.idea_id": string;
  /** Format: uuid */
  "rowFilter.idea_tags.id": string;
  /** Format: uuid */
  "rowFilter.idea_tags.tag_id": string;
}

export interface operations {}

export interface external {}
